{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { EventEmitter } from 'node:events'\nimport Axios from 'axios'\nimport { type SomeTelemetryEvent, type TelemetryEvent, type ElgatoHardwareItem, TELEMETRY_EVENTS } from './types'\n\n/*\n * Bitfocus Telemetry Module\n *\n * This telemetry module that is used to send telemetry data to Bitfocus.\n * This data is NOT used to monitor you as a user, but rather to resolve some business stuff.\n *\n * No shady secrets, really.\n *\n * If you have questions, feel free to reach out to william@bitfocus.io :)\n */\n\nconst TELEMETRY_MODULE_VERSION = '1.0.0'\n\nexport class BitfocusTelemetry extends EventEmitter {\n\tprivate elgatoHardwareList: ElgatoHardwareItem[] = []\n\tprivate bitfocusProduct: 'buttons' | 'companion' | null = null\n\tprivate kvpSetter: <T>(key: string, value: T) => void\n\tprivate kvpGetter: <T>(key: string) => T | undefined\n\tprivate interval: NodeJS.Timeout | null = null\n\tprivate dataWaiting = false\n\tprivate dataLastPayload: string | null = null\n\tprivate dataSending = false\n\tprivate apiInitialWait = 1000 * 1 //  60 * 2 // 2 minutes\n\tprivate apiInterval = 1000 * 60 * 60 // 1 hour\n\tprivate api: ReturnType<typeof Axios.create>\n\n\tconstructor(\n\t\tkvpSet: <T>(key: string, value: T) => void,\n\t\tkvpGet: <T>(key: string) => T | undefined,\n\t\tinstallationId?: string,\n\t\taxiosInstance = Axios.create({\n\t\t\tbaseURL: 'https://api.bitfocus.io/v1',\n\t\t\ttimeout: 10000,\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t'User-Agent': `BitfocusTelemetry/${TELEMETRY_MODULE_VERSION}`,\n\t\t\t},\n\t\t}),\n\t) {\n\t\tsuper()\n\t\tthis.api = axiosInstance\n\t\tthis.kvpSetter = kvpSet\n\t\tthis.kvpGetter = kvpGet\n\t\tif (installationId) this.api.defaults.headers['X-Installation'] = installationId\n\t}\n\n\tpublic init() {\n\t\tthis.interval = setInterval(() => this.tick(), this.apiInterval)\n\t\tsetTimeout(() => {\n\t\t\tthis.tick()\n\t\t}, this.apiInitialWait)\n\t}\n\n\tprivate async tick() {\n\t\tconst allStates: SomeTelemetryEvent[] = []\n\n\t\t// Elgato Hardware Presence\n\t\tif (this.elgatoHardwareList) {\n\t\t\tconst elgatoHardwarePresence: TelemetryEvent<TELEMETRY_EVENTS.ELGATO_HARDWARE_PRESENCE> = [\n\t\t\t\tTELEMETRY_EVENTS.ELGATO_HARDWARE_PRESENCE,\n\t\t\t\t[...this.elgatoHardwareList],\n\t\t\t]\n\t\t\tallStates.push(elgatoHardwarePresence)\n\t\t}\n\n\t\t// Bitfocus Software Presence\n\t\tif (this.bitfocusProduct) {\n\t\t\tconst bitfocusSoftware: TelemetryEvent<TELEMETRY_EVENTS.BITFOCUS_SOFTWARE> = [\n\t\t\t\tTELEMETRY_EVENTS.BITFOCUS_SOFTWARE,\n\t\t\t\tthis.bitfocusProduct,\n\t\t\t]\n\t\t\tallStates.push(bitfocusSoftware)\n\t\t}\n\n\t\t// Only send data if it has changed\n\t\tif (!this.dataWaiting && this.dataLastPayload !== JSON.stringify(allStates)) {\n\t\t\tthis.dataLastPayload = JSON.stringify(allStates)\n\t\t\tthis.dataWaiting = true\n\t\t\tawait this.send(allStates)\n\t\t}\n\t}\n\n\tprivate async send(events: SomeTelemetryEvent[]) {\n\t\tif (this.dataSending) return\n\t\tthis.dataSending = true\n\n\t\ttry {\n\t\t\tconst response = await this.api.post('/product/telemetry', events)\n\t\t\tif (response.status === 200) {\n\t\t\t\tthis.dataWaiting = false\n\t\t\t}\n\t\t\t// biome-ignore lint/suspicious/noExplicitAny: <explanation>\n\t\t} catch (error: any) {\n\t\t\tif (error.response) {\n\t\t\t\tif (process.env.BITFOCUS === '1') {\n\t\t\t\t\tconsole.error('Telemetry Error: ', error.response.status, error.response.data)\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (process.env.BITFOCUS === '1') {\n\t\t\t\t\tconsole.error('Telemetry Error: ', error.message)\n\t\t\t\t}\n\t\t\t}\n\t\t} finally {\n\t\t\tthis.dataSending = false\n\t\t}\n\t}\n\n\tpublic setElgatoHardware(list: ElgatoHardwareItem[]) {\n\t\tconst existingList = this.kvpGetter<ElgatoHardwareItem[]>('elgatoHardware') ?? []\n\n\t\tconst object: Map<string, boolean> = new Map()\n\t\tfor (const [name] of existingList) {\n\t\t\tobject.set(name, false)\n\t\t}\n\n\t\tfor (const [name, present] of list) {\n\t\t\tobject.set(name, present)\n\t\t}\n\n\t\tconst newList: ElgatoHardwareItem[] = []\n\n\t\tfor (const [name, present] of object) {\n\t\t\tnewList.push([name, present])\n\t\t}\n\n\t\tthis.elgatoHardwareList = newList\n\t\tthis.kvpSetter('elgatoHardware', newList)\n\t}\n\n\tpublic setBitfocusProduct(product: 'buttons' | 'companion') {\n\t\tthis.bitfocusProduct = product\n\t}\n\n\tpublic async close() {\n\t\t// stop timers\n\t\tif (this.interval) {\n\t\t\tclearInterval(this.interval)\n\t\t}\n\n\t\twhile (this.dataSending) {\n\t\t\tawait new Promise((resolve) => setTimeout(resolve, 100))\n\t\t}\n\t}\n}\n\nexport function sum(a: number, b: number): number {\n\treturn a + b\n}\n"]}