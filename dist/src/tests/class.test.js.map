{"version":3,"file":"class.test.js","sourceRoot":"","sources":["../../../src/tests/class.test.ts"],"names":[],"mappings":";;AAAA,OAAO,CAAC,GAAG,CAAC,QAAQ,GAAG,MAAM,CAAA;AAE7B,2CAA2E;AAC3E,0BAAsC;AAEtC,MAAM,GAAG,GAAyB,IAAI,GAAG,EAAE,CAAA;AAE3C,MAAM,IAAI,GAAG,CAAI,GAAW,EAAE,KAAQ,EAAE,EAAE;IACzC,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAA;AACpB,CAAC,CAAA;AAED,MAAM,IAAI,GAAG,CAAI,GAAW,EAAiB,EAAE;IAC9C,OAAO,GAAG,CAAC,GAAG,CAAC,GAAG,CAAkB,CAAA;AACrC,CAAC,CAAA;AAED,MAAM,SAAS,GAAG,IAAI,qBAAiB,CAAC,IAAI,EAAE,IAAI,CAAC,CAAA;AAEnD,IAAA,kBAAQ,EAAC,qCAAqC,EAAE,GAAG,EAAE;IACpD,IAAA,mBAAS,EAAC,GAAG,EAAE;QACd,SAAS,CAAC,IAAI,EAAE,CAAA;IACjB,CAAC,CAAC,CAAA;IAEF,IAAA,cAAI,EAAC,8BAA8B,EAAE,GAAG,EAAE;QACzC,SAAS,CAAC,iBAAiB,CAAC,CAAC,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC,CAAC,CAAA;QACnD,IAAA,gBAAM,EAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC,CAAC,CAAA;IAC/D,CAAC,CAAC,CAAA;IAEF,IAAA,cAAI,EAAC,sCAAsC,EAAE,GAAG,EAAE;QACjD,SAAS,CAAC,iBAAiB,CAAC,CAAC,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC,CAAC,CAAA;QACpD,IAAA,gBAAM,EAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC,CAAC,CAAA;IAChE,CAAC,CAAC,CAAA;IAEF,IAAA,cAAI,EAAC,mDAAmD,EAAE,GAAG,EAAE;QAC9D,SAAS,CAAC,iBAAiB,CAAC,EAAE,CAAC,CAAA;QAC/B,IAAA,gBAAM,EAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC,CAAC,CAAA;IAChE,CAAC,CAAC,CAAA;IAEF,IAAA,kBAAQ,EAAC,KAAK,IAAI,EAAE;QACnB,MAAM,SAAS,CAAC,KAAK,EAAE,CAAA;IACxB,CAAC,CAAC,CAAA;AACH,CAAC,CAAC,CAAA","sourcesContent":["process.env.NODE_ENV = 'test'\n\nimport { afterAll, beforeAll, describe, expect, test } from '@jest/globals'\nimport { BitfocusTelemetry } from '..'\n\nconst kvp: Map<string, unknown> = new Map()\n\nconst sset = <T>(key: string, value: T) => {\n\tkvp.set(key, value)\n}\n\nconst sget = <T>(key: string): T | undefined => {\n\treturn kvp.get(key) as T | undefined\n}\n\nconst telemetry = new BitfocusTelemetry(sset, sget)\n\ndescribe('BitfocusTelemetry setElgatoHardware', () => {\n\tbeforeAll(() => {\n\t\ttelemetry.init()\n\t})\n\n\ttest('should add new hardware item', () => {\n\t\ttelemetry.setElgatoHardware([['streamdeck', true]])\n\t\texpect(sget('elgatoHardware')).toEqual([['streamdeck', true]])\n\t})\n\n\ttest('should update existing hardware item', () => {\n\t\ttelemetry.setElgatoHardware([['streamdeck', false]])\n\t\texpect(sget('elgatoHardware')).toEqual([['streamdeck', false]])\n\t})\n\n\ttest('should retain previous items if new list is empty', () => {\n\t\ttelemetry.setElgatoHardware([])\n\t\texpect(sget('elgatoHardware')).toEqual([['streamdeck', false]])\n\t})\n\n\tafterAll(async () => {\n\t\tawait telemetry.close()\n\t})\n})\n"]}